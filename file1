## FINAL PROJECT
## Emily Adamo, Andrea Gonzalvo, Rose Saperston

# AIR QUALITY API

import requests
import sqlite3
import matplotlib.pyplot as plt

# Predefined list of US cities
cities_list = [
    'New York', 'Los Angeles', 'Chicago', 'Houston', 'Phoenix', 'Philadelphia', 'San Antonio', 'San Diego', 'Dallas', 'San Jose',
    'Austin', 'Jacksonville', 'Fort Worth', 'Columbus', 'Charlotte', 'San Francisco', 'Indianapolis', 'Seattle', 'Denver', 'Washington',
    'Boston', 'El Paso', 'Nashville', 'Detroit', 'Oklahoma City', 'Portland', 'Las Vegas', 'Louisville', 'Baltimore',
    'Milwaukee', 'Albuquerque', 'Tucson', 'Fresno', 'Sacramento', 'Mesa', 'Kansas City', 'Atlanta', 'Long Beach', 'Colorado Springs',
    'Raleigh', 'Miami', 'Omaha', 'Oakland', 'Minneapolis', 'Tulsa', 'Arlington', 'New Orleans', 'Wichita',
    'Cleveland', 'Tampa', 'Bakersfield', 'Aurora', 'Anaheim', 'Honolulu', 'Santa Ana', 'Corpus Christi', 'Riverside', 'Lexington',
    'St. Louis', 'Stockton', 'Pittsburgh', 'Anchorage', 'Cincinnati', 'Saint Paul', 'Greensboro', 'Toledo', 'Newark',
    'Henderson', 'Lincoln', 'Orlando', 'Jersey City', 'Chula Vista', 'Buffalo', 'Fort Wayne', 'St. Petersburg', 
    'Durham', 'Irvine', 'Madison', 'Lubbock', 'Gilbert', 'Winston-Salem', 'Glendale', 'Hialeah', 
     'Irving', 'North Las Vegas', 'Scottsdale', 'Baton Rouge', 'Richmond', 'Boise', 'San Bernardino'
]

# Function to fetch air quality data from API
def fetch_data_from_api(api_key, city_name):
    url = f"https://api.waqi.info/feed/{city_name}/?token={api_key}"
    response = requests.get(url)
    if response.status_code == 200:
        return response.json()
    else:
        print(f"Failed to fetch data for {city_name} from API")
        return None

# Function to create SQLite database and insert data
import sqlite3

# Function to create SQLite database and insert data
def create_database_and_insert_data(api_key, city_name):
    # Fetch air quality data from the API
    data = fetch_data_from_api(api_key, city_name)
    if not data or 'data' not in data:
        print(f"No data available for {city_name}")
        return
    
    # Connect to SQLite database
    conn = sqlite3.connect('weather_data.db')  # Connect to the weather_data.db database
    c = conn.cursor()

    # Create table if it doesn't exist
    c.execute('''CREATE TABLE IF NOT EXISTS air_quality_data (
                 id INTEGER PRIMARY KEY AUTOINCREMENT,
                 city TEXT,
                 aqi INTEGER,
                 dominant_pollutant TEXT
                 )''')

    # Check if the data for the city already exists in the database
    c.execute("SELECT * FROM air_quality_data WHERE city=?", (city_name,))
    existing_data = c.fetchone()
    if existing_data:
        print(f"Data for {city_name} already exists in the database. Not inserting duplicates.")
    else:
        # Insert data into the table
        c.execute('''INSERT INTO air_quality_data (city, aqi, dominant_pollutant) 
                     VALUES (?, ?, ?)''', (city_name, data['data']['aqi'], data['data']['dominentpol']))
        conn.commit()
        print(f"Data for {city_name} inserted successfully.")

    conn.close()

# Function to plot the bar chart
def plot_air_quality(cities, aqi_values):
    # Convert AQI values to integers, skipping non-numeric values
    aqi_values_int = []
    for value in aqi_values:
        try:
            aqi_values_int.append(int(value))
        except ValueError:
            continue
    
    plt.figure(figsize=(10, 6))
    plt.bar(cities[:len(aqi_values_int)], aqi_values_int, color='skyblue')
    plt.xlabel('City')
    plt.ylabel('Air Quality Index (AQI)')
    plt.title('Air Quality Index (AQI) Across Cities')
    plt.xticks(rotation=45, ha='right')
    plt.tight_layout()
    plt.show()

# Function to plot a line chart
def plot_line_chart(cities, aqi_values):
    plt.figure(figsize=(10, 6))
    plt.plot(cities[:len(aqi_values)], aqi_values, marker='o', color='green', linestyle='-')
    plt.xlabel('City')
    plt.ylabel('Air Quality Index (AQI)')
    plt.title('Air Quality Index (AQI) Across Cities')
    plt.xticks(rotation=45, ha='right')
    plt.tight_layout()
    plt.show()

# Main function
def main():
    api_key = '4d10eff89e4c42d51e89711f979e6371524a5a3b'
    total_items_inserted = 0  # Initialize the counter for total items inserted
    cities = []  # List to store city names
    aqi_values = []  # List to store AQI values

    # Collect data for 25 cities
    for city_index in range(25):
        city_name = cities_list[city_index]
        create_database_and_insert_data(api_key, city_name)
        # Fetch air quality data from the database
        conn = sqlite3.connect('air_quality.db')
        c = conn.cursor()
        c.execute("SELECT * FROM air_quality_data WHERE city=?", (city_name,))
        data = c.fetchone()
        conn.close()
        if data:
            cities.append(city_name)
            aqi_values.append(data[2])  # Index 2 corresponds to the AQI value
            total_items_inserted += 1  # Increment the counter for total items inserted

    # Plot air quality data
    plot_air_quality(cities, aqi_values)
    plot_line_chart(cities, aqi_values)


        
if __name__ == "__main__":
    main()
#maybe add another visualization 
    #trying to add changes so it will commit correctly

















